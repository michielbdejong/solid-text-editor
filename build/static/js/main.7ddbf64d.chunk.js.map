{"version":3,"sources":["components/Editor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Editor","props","state","url","handleUrlChange","bind","handleTextChange","handleLoad","handleSave","event","this","setState","target","value","text","doc","SolidAuth","fetch","preventDefault","then","response","a","console","log","method","body","headers","type","onChange","className","onClick","cols","rows","React","Component","App","LoggedOut","LoginButton","popup","LoggedIn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8WAGqBA,E,YAEnB,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KAFRC,WACwB,EAEtB,EAAKA,MAAQ,CAACC,IAAK,0DAEnB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAPI,E,6EAURI,GACdC,KAAKC,SAAS,CAACR,IAAKM,EAAMG,OAAOC,U,uCAGlBJ,GACfC,KAAKC,SAAS,CAACG,KAAML,EAAMG,OAAOC,U,iCAGzBJ,GAAa,IAAD,OACfM,EAAMC,IAAUC,MAAMP,KAAKR,MAAMC,KACvCM,EAAMS,iBACNH,EAAII,KAAJ,uCAAS,WAAOC,GAAP,eAAAC,EAAA,sEACYD,EAASN,OADrB,OACDA,EADC,OAEPQ,QAAQC,IAAI,UAAWT,GACvB,EAAKH,SAAS,CAAEG,SAHT,2CAAT,yD,iCAOSL,GACTO,IAAUC,MAAMP,KAAKR,MAAMC,IAAK,CAC9BqB,OAAQ,MACRC,KAAMf,KAAKR,MAAMY,KACjBY,QAAS,CACP,eAAgB,gBAGpBjB,EAAMS,mB,+BAIN,OACE,8BACE,6BACE,sCAEE,2BAAOS,KAAK,OAAOd,MAAOH,KAAKR,MAAMC,IAAKyB,SAAUlB,KAAKN,mBAE3D,4BAAQyB,UAAU,oBAAoBC,QAASpB,KAAKH,YAApD,QACA,4BAAQsB,UAAU,oBAAoBC,QAASpB,KAAKF,YAApD,SAEF,6BACC,8BAAUK,MAAOH,KAAKR,MAAMY,KAAMc,SAAUlB,KAAKJ,iBAAkByB,KAAM,GAAIC,KAAM,W,GArDxDC,IAAMC,WCe3BC,EAdO,WACpB,OAAO,oCACL,kBAACC,EAAA,EAAD,KACE,6BAASP,UAAU,WACjB,uBAAGA,UAAU,WAAb,gDAAoE,sCAApE,YACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,aAAaT,UAAU,8BAA1C,2BAGJ,kBAACU,EAAA,EAAD,KACA,kBAAC,EAAD,SCDgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.7ddbf64d.chunk.js","sourcesContent":["import React from \"react\";\nimport SolidAuth from 'solid-auth-client';\n\nexport default class Editor extends React.Component {\n  state: any\n  constructor(props: any) {\n    super(props);\n    this.state = {url: 'https://michielbdejong.inrupt.net/private/some-doc.txt'};\n\n    this.handleUrlChange = this.handleUrlChange.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleLoad = this.handleLoad.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n  }\n\n  handleUrlChange(event: any) {\n    this.setState({url: event.target.value});\n  }\n\n  handleTextChange(event: any) {\n    this.setState({text: event.target.value});\n  }\n\n  handleLoad(event: any) {\n    const doc = SolidAuth.fetch(this.state.url);\n    event.preventDefault();\n    doc.then(async (response) => {\n      const text = await response.text();\n      console.log('fetched', text);\n      this.setState({ text });\n    });\n  }\n\n  handleSave(event: any) {\n    SolidAuth.fetch(this.state.url, {\n      method: 'PUT',\n      body: this.state.text,\n      headers: {\n        'Content-Type': 'text/plain'\n      }\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form>\n        <div>\n          <label>\n            URL:\n            <input type=\"text\" value={this.state.url} onChange={this.handleUrlChange} />\n          </label>\n          <button className=\"is-default button\" onClick={this.handleLoad}>Load</button>\n          <button className=\"is-warning button\" onClick={this.handleSave}>Save</button>\n        </div>\n        <div>\n         <textarea value={this.state.text} onChange={this.handleTextChange} cols={40} rows={10} />\n        </div>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport { LoggedOut, LoginButton, LoggedIn } from '@solid/react';\nimport Editor from './components/Editor';\n\nconst App: React.FC = () => {\n  return <>\n    <LoggedOut>\n      <section className=\"section\">\n        <p className=\"content\">This app requires you to log in. It requires <b>Control</b> access.</p>\n        <LoginButton popup=\"popup.html\" className=\"button is-large is-primary\">Log in to start using</LoginButton>\n      </section>\n    </LoggedOut>\n    <LoggedIn>\n    <Editor></Editor>\n    </LoggedIn>\n  </>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}